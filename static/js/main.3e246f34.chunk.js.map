{"version":3,"sources":["ShoppingItem.jsx","App.js","serviceWorker.js","index.js"],"names":["ShoppingItem","react_default","a","createElement","index_es","container","spacing","direction","item","xs","value","this","props","name","onChange","handleEdit","index","size","color","onClick","handleDecrement","icons_index_es","variant","style","padding","count","handleIncrement","handleDelete","Component","App","state","items","event","newValue","target","_this","setState","prevState","splice","handleAdd","concat","Object","toConsumableArray","_this2","alignItems","minHeight","marginTop","className","width","justifyContent","map","src_ShoppingItem","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e246f34.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  ListItem,\r\n  Typography,\r\n  IconButton,\r\n  Fab,\r\n  Grid,\r\n  TextField\r\n} from \"@material-ui/core\";\r\nimport { Add, Remove, Delete } from \"@material-ui/icons\";\r\n\r\nclass ShoppingItem extends Component {\r\n  render() {\r\n    return (\r\n      <ListItem>\r\n        <Grid container spacing={8} direction=\"row\">\r\n          <Grid item xs={1} />\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              value={this.props.item.name}\r\n              onChange={this.props.handleEdit(this.props.index)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={1}>\r\n            <IconButton\r\n              size=\"small\"\r\n              color=\"secondary\"\r\n              onClick={this.props.handleDecrement(this.props.index)}\r\n            >\r\n              <Remove />\r\n            </IconButton>\r\n          </Grid>\r\n          <Grid item xs={1}>\r\n            <Typography variant=\"h6\" style={{ padding: 8 }}>\r\n              {this.props.item.count}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={1}>\r\n            <IconButton\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              onClick={this.props.handleIncrement(this.props.index)}\r\n            >\r\n              <Add />\r\n            </IconButton>\r\n          </Grid>\r\n          <Grid item xs={2} />\r\n          <Grid item xs={1}>\r\n            <Fab\r\n              size=\"small\"\r\n              color=\"secondary\"\r\n              onClick={this.props.handleDelete(this.props.index)}\r\n            >\r\n              <Delete />\r\n            </Fab>\r\n          </Grid>\r\n        </Grid>\r\n      </ListItem>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShoppingItem;\r\n","import React, { Component } from \"react\";\nimport {\n  List,\n  ListItem,\n  Button,\n  Typography,\n  Grid,\n  Paper\n} from \"@material-ui/core\";\nimport ShoppingItem from \"./ShoppingItem\";\n\nclass App extends Component {\n  state = {\n    items: [\n      {\n        name: \"Eggs\",\n        count: 12\n      },\n      {\n        name: \"Bread\",\n        count: 1\n      },\n      {\n        name: \"Milk\",\n        count: 2\n      }\n    ]\n  };\n\n  handleEdit = index => event => {\n    let newValue = event.target.value;\n    this.setState(prevState => {\n      prevState.items[index].name = newValue;\n      return { items: prevState.items };\n    });\n  };\n  handleIncrement = index => () => {\n    this.setState(prevState => {\n      prevState.items[index].count++;\n      return { items: prevState.items };\n    });\n  };\n  handleDecrement = index => () => {\n    this.setState(prevState => {\n      prevState.items[index].count--;\n      if (prevState.items[index].count < 0) prevState.items[index].count = 0;\n      return { items: prevState.items };\n    });\n  };\n  handleDelete = index => () => {\n    this.setState(prevState => {\n      prevState.items.splice(index, 1);\n      return { items: prevState.items };\n    });\n  };\n  handleAdd = () => {\n    this.setState(prevState => {\n      return { items: [...prevState.items, { name: \"\", count: 0 }] };\n    });\n  };\n\n  render() {\n    return (\n      <Grid\n        container\n        spacing={0}\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ minHeight: \"100vh\", marginTop: 20 }}\n      >\n        <Grid item>\n          <Paper\n            className=\"App\"\n            style={{ width: 700, justifyContent: \"center\" }}\n          >\n            <List>\n              <ListItem>\n                <Typography variant=\"h4\">Shopping List</Typography>\n              </ListItem>\n              {this.state.items.map((item, index) => (\n                <ShoppingItem\n                  key={index}\n                  index={index}\n                  item={item}\n                  handleDelete={this.handleDelete}\n                  handleIncrement={this.handleIncrement}\n                  handleDecrement={this.handleDecrement}\n                  handleEdit={this.handleEdit}\n                />\n              ))}\n              <ListItem>\n                <Button\n                  onClick={this.handleAdd}\n                  variant=\"contained\"\n                  color=\"primary\"\n                >\n                  Add item\n                </Button>\n              </ListItem>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}